{"ast":null,"code":"const checkForShip = (player, coordinates) => {\n  for (let i = 0; i < player.ships.length; i++) {\n    let ship = player.ships[i];\n    let shipPresent = ship.locations.filter(actualCoordinates => {\n      if (actualCoordinates[0] === parseInt(coordinates[0]) && actualCoordinates[1] === parseInt(coordinates[1])) {\n        return ship;\n      } else {\n        return false;\n      }\n    })[0];\n\n    if (shipPresent) {\n      return ship;\n    }\n  }\n\n  return false;\n}; //function not needed with redux\n//\n// const damageShip = (ship, coordinates,damage)=>{\n//     ship.damage.push(coordinates);\n//\n// }\n\n\nconst fire = (player, coordinates) => {\n  const ship = checkForShip(player, coordinates);\n\n  if (ship) {\n    //damageShip(ship,coordinates)\n    return coordinates;\n  } else {\n    return false;\n  }\n};\n\nexport { checkForShip, fire };","map":{"version":3,"sources":["/Users/tylerbarkey/Documents/GitHub/battleship/src/game_logic/ship_methods.js"],"names":["checkForShip","player","coordinates","i","ships","length","ship","shipPresent","locations","filter","actualCoordinates","parseInt","fire"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAC5C,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,KAAP,CAAaC,MAAjC,EAAyCF,CAAC,EAA1C,EAA8C;AAC5C,QAAIG,IAAI,GAAGL,MAAM,CAACG,KAAP,CAAaD,CAAb,CAAX;AACA,QAAII,WAAW,GAAGD,IAAI,CAACE,SAAL,CAAeC,MAAf,CAAsBC,iBAAiB,IAAI;AAC3D,UACEA,iBAAiB,CAAC,CAAD,CAAjB,KAAyBC,QAAQ,CAACT,WAAW,CAAC,CAAD,CAAZ,CAAjC,IACAQ,iBAAiB,CAAC,CAAD,CAAjB,KAAyBC,QAAQ,CAACT,WAAW,CAAC,CAAD,CAAZ,CAFnC,EAGE;AACA,eAAOI,IAAP;AACD,OALD,MAKO;AACL,eAAO,KAAP;AACD;AACF,KATiB,EASf,CATe,CAAlB;;AAWA,QAAIC,WAAJ,EAAiB;AACf,aAAOD,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAnBD,C,CAqBA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMM,IAAI,GAAG,CAACX,MAAD,EAASC,WAAT,KAAyB;AACpC,QAAMI,IAAI,GAAGN,YAAY,CAACC,MAAD,EAASC,WAAT,CAAzB;;AAEA,MAAII,IAAJ,EAAU;AACR;AACA,WAAOJ,WAAP;AACD,GAHD,MAGO;AACL,WAAO,KAAP;AACD;AACF,CATD;;AAWA,SAASF,YAAT,EAAuBY,IAAvB","sourcesContent":["const checkForShip = (player, coordinates) => {\n  for (let i = 0; i < player.ships.length; i++) {\n    let ship = player.ships[i];\n    let shipPresent = ship.locations.filter(actualCoordinates => {\n      if (\n        actualCoordinates[0] === parseInt(coordinates[0]) &&\n        actualCoordinates[1] === parseInt(coordinates[1])\n      ) {\n        return ship;\n      } else {\n        return false;\n      }\n    })[0];\n\n    if (shipPresent) {\n      return ship;\n    }\n  }\n  return false;\n};\n\n//function not needed with redux\n//\n// const damageShip = (ship, coordinates,damage)=>{\n//     ship.damage.push(coordinates);\n//\n// }\n\nconst fire = (player, coordinates) => {\n  const ship = checkForShip(player, coordinates);\n\n  if (ship) {\n    //damageShip(ship,coordinates)\n    return coordinates;\n  } else {\n    return false;\n  }\n};\n\nexport { checkForShip, fire };\n"]},"metadata":{},"sourceType":"module"}