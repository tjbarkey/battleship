{"ast":null,"code":"import React from 'react';\nimport { checkForShip } from './ship_methods.js';\n\nconst validateLocation = (player, coordinates) => {\n  let x = coordinates[0];\n  let y = coordinates[1];\n  const spaceAvailable = !checkForShip(player, coordinates);\n\n  if (x <= 9 && x >= 0 && y <= 9 && y >= 0) {\n    return spaceAvailable; // decides whether this valid space is occupied\n  } else {\n    return false;\n  }\n};\n\nconst validateLocations = (player, locations) => {\n  var validated = locations.map(location => {\n    return validateLocation(player, location);\n  });\n  return validated.indexOf(false) === -1;\n};\n\nconst placeShip = (player, ship, startingCoordinates, direction) => {\n  if (!direction) throw Error('You left out the direction! I need that for math!');\n  const proposedLocations = [];\n  let previousLocation;\n  let rowNumber;\n  let columnNumber;\n\n  for (let i = 0; i < ship.size; i++) {\n    previousLocation = proposedLocations[i - 1] || [];\n    rowNumber = previousLocation[0];\n    columnNumber = previousLocation[1];\n    proposedLocations[i] = i === 0 ? startingCoordinates : direction === 'horizontal' ? [rowNumber, ++columnNumber] : [++rowNumber, columnNumber];\n  }\n\n  if (validateLocations(player, proposedLocations)) {\n    ship.locations = proposedLocations;\n  } else {\n    return false;\n  }\n};\n\nconst getRandomCoordinates = () => {\n  let x = Math.floor(Math.random() * 9);\n  let y = Math.floor(Math.random() * 9);\n  return [x, y];\n};\n\nconst getRandomDirection = () => {\n  return Math.random() > 0.5 ? 'horizontal' : 'vertical';\n}; //fire(player, getRandomCoordinates());\n//placeShip(computerPlayer, computerPlayer.ship[0], getRandomCoordinates(), getRandomDirection());\n\n\nexport { placeShip, validateLocations, validateLocation };","map":{"version":3,"sources":["/Users/tylerbarkey/Documents/GitHub/battleship/src/game_logic/player_methods.js"],"names":["React","checkForShip","validateLocation","player","coordinates","x","y","spaceAvailable","validateLocations","locations","validated","map","location","indexOf","placeShip","ship","startingCoordinates","direction","Error","proposedLocations","previousLocation","rowNumber","columnNumber","i","size","getRandomCoordinates","Math","floor","random","getRandomDirection"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,QAA2B,mBAA3B;;AAEA,MAAMC,gBAAgB,GAAE,CAACC,MAAD,EAASC,WAAT,KAAwB;AAC9C,MAAIC,CAAC,GAAGD,WAAW,CAAC,CAAD,CAAnB;AACA,MAAIE,CAAC,GAAGF,WAAW,CAAC,CAAD,CAAnB;AAEA,QAAMG,cAAc,GAAG,CAACN,YAAY,CAACE,MAAD,EAASC,WAAT,CAApC;;AAEA,MAAKC,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,CAAhB,IAAuBC,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,CAA1C,EAA8C;AAC5C,WAAOC,cAAP,CAD4C,CACrB;AACxB,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAXD;;AAaA,MAAMC,iBAAiB,GAAE,CAACL,MAAD,EAASM,SAAT,KAAsB;AAC7C,MAAIC,SAAS,GAAGD,SAAS,CAACE,GAAV,CAAgBC,QAAD,IAAa;AAC1C,WAAOV,gBAAgB,CAACC,MAAD,EAASS,QAAT,CAAvB;AACD,GAFe,CAAhB;AAGA,SAAOF,SAAS,CAACG,OAAV,CAAkB,KAAlB,MAA6B,CAAC,CAArC;AACD,CALD;;AAOA,MAAMC,SAAS,GAAE,CAACX,MAAD,EAASY,IAAT,EAAeC,mBAAf,EAAoCC,SAApC,KAAiD;AAChE,MAAI,CAACA,SAAL,EAAgB,MAAMC,KAAK,CAAC,mDAAD,CAAX;AAChB,QAAMC,iBAAiB,GAAG,EAA1B;AACA,MAAIC,gBAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,YAAJ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACS,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClCH,IAAAA,gBAAgB,GAAGD,iBAAiB,CAACI,CAAC,GAAG,CAAL,CAAjB,IAA4B,EAA/C;AACAF,IAAAA,SAAS,GAAGD,gBAAgB,CAAC,CAAD,CAA5B;AACAE,IAAAA,YAAY,GAAGF,gBAAgB,CAAC,CAAD,CAA/B;AAEAD,IAAAA,iBAAiB,CAACI,CAAD,CAAjB,GAAwBA,CAAC,KAAK,CAAP,GACnBP,mBADmB,GAElBC,SAAS,KAAK,YAAf,GACE,CAACI,SAAD,EAAY,EAAEC,YAAd,CADF,GAEE,CAAC,EAAED,SAAH,EAAcC,YAAd,CAJN;AAKD;;AAED,MAAId,iBAAiB,CAACL,MAAD,EAASgB,iBAAT,CAArB,EAAkD;AAChDJ,IAAAA,IAAI,CAACN,SAAL,GAAiBU,iBAAjB;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAxBD;;AA0BA,MAAMM,oBAAoB,GAAE,MAAK;AAC/B,MAAIpB,CAAC,GAAGqB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAR;AACA,MAAItB,CAAC,GAAGoB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAR;AACA,SAAO,CAACvB,CAAD,EAAIC,CAAJ,CAAP;AACD,CAJD;;AAMA,MAAMuB,kBAAkB,GAAE,MAAK;AAC7B,SAAOH,IAAI,CAACE,MAAL,KAAgB,GAAhB,GACH,YADG,GAEH,UAFJ;AAGD,CAJD,C,CAOA;AACA;;;AAEA,SAAQd,SAAR,EAAkBN,iBAAlB,EAAoCN,gBAApC","sourcesContent":["import React from 'react';\nimport {checkForShip} from './ship_methods.js';\n\nconst validateLocation =(player, coordinates)=> {\n  let x = coordinates[0];\n  let y = coordinates[1];\n\n  const spaceAvailable = !checkForShip(player, coordinates);\n\n  if ((x <= 9 && x >= 0) && (y <= 9 && y >= 0)) {\n    return spaceAvailable; // decides whether this valid space is occupied\n  } else {\n    return false;\n  }\n}\n\nconst validateLocations =(player, locations)=> {\n  var validated = locations.map( (location)=> {\n    return validateLocation(player, location);\n  });\n  return validated.indexOf(false) === -1;\n}\n\nconst placeShip =(player, ship, startingCoordinates, direction)=> {\n  if (!direction) throw Error('You left out the direction! I need that for math!');\n  const proposedLocations = [];\n  let previousLocation;\n  let rowNumber;\n  let columnNumber;\n\n  for (let i = 0; i < ship.size; i++) {\n    previousLocation = proposedLocations[i - 1] || [];\n    rowNumber = previousLocation[0];\n    columnNumber = previousLocation[1];\n\n    proposedLocations[i] = (i === 0)\n      ? startingCoordinates\n      : (direction === 'horizontal')\n        ? [rowNumber, ++columnNumber]\n        : [++rowNumber, columnNumber];\n  }\n\n  if (validateLocations(player, proposedLocations)) {\n    ship.locations = proposedLocations;\n  } else {\n    return false;\n  }\n}\n\nconst getRandomCoordinates =()=> {\n  let x = Math.floor(Math.random() * 9);\n  let y = Math.floor(Math.random() * 9);\n  return [x, y];\n}\n\nconst getRandomDirection =()=> {\n  return Math.random() > 0.5\n    ? 'horizontal'\n    : 'vertical';\n}\n\n\n//fire(player, getRandomCoordinates());\n//placeShip(computerPlayer, computerPlayer.ship[0], getRandomCoordinates(), getRandomDirection());\n\nexport {placeShip,validateLocations,validateLocation};\n"]},"metadata":{},"sourceType":"module"}